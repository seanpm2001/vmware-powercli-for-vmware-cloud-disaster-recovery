//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace VMware.VCDRService
{
    using System;
    using System.Threading;
    using System.Net.Http; 

    public enum VMCEnviroment { Production, Stage };
    public partial class VCDRServer
    {
        public string BaseUrl
        {
            get { return String.Concat("https://", _server, "/api/vcdr/", _version); }
        }

        public string Version { get => _version; set => _version = value; }
        public string Server { get => _server; set => _server = value; }

        private string _server;
        private string _version = "v1alpha";
        private string _token;
        public Boolean Verbose { get; set; }

        private int _tokenExpiration = 0;

        private VMCEnviroment _enviroment = VMCEnviroment.Production;
        public VMCEnviroment Enviroment { get => _enviroment; }
        private Timer timer;
        public VCDRServer(String token, VMCEnviroment enviroment = VMCEnviroment.Production)
        {
            _token = token;
            _enviroment = enviroment;
            _httpClient = new HttpClient();
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
            var _accessCode = GetAccessToken(_token, _enviroment);
            _httpClient.DefaultRequestHeaders.Add("x-da-access-token", _accessCode.access_token);

            _tokenExpiration = Int16.Parse(_accessCode.expires_in);
            var renewal = TimeSpan.FromSeconds(_tokenExpiration - _tokenExpiration / 4);
            timer = new Timer(Callback, null, renewal, renewal);
        }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings)
        {
            settings.MaxDepth = 120;
        }

        public void Callback(object state)
        {
            if (Verbose)
            {
                System.Console.WriteLine("Start renew token Env:" + _enviroment.ToString());
            }
            var _accessCode = GetAccessToken(_token, _enviroment);
            _httpClient.DefaultRequestHeaders.Clear();
            _httpClient.DefaultRequestHeaders.Add("x-da-access-token", _accessCode.access_token);
            if (Verbose)
            {
                System.Console.WriteLine("End renew token Env:" + _enviroment.ToString());
            }
        }

        public void Dispose()
        {
            if (Verbose)
            {
                System.Console.WriteLine("Start Dispose");
            }
            timer.Dispose();
            _httpClient.Dispose();
            if (Verbose)
            {
                System.Console.WriteLine("End Dispose");
            }

        }

        public virtual GetAuthorizeResponse GetAccessToken(String token, VMCEnviroment enviroment = VMCEnviroment.Production)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetAccessTokenAsync(token, enviroment, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        public virtual async System.Threading.Tasks.Task<GetAuthorizeResponse> GetAccessTokenAsync(String token, VMCEnviroment enviroment = VMCEnviroment.Production, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(" https://").Append((enviroment == VMCEnviroment.Stage) ? "console-stg" : "console").Append(".cloud.vmware.com/csp/gateway/am/api/auth/api-tokens/authorize?refresh_token=").Append(token);


            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetAuthorizeResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad request. The server could not understand the request.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized. The client has not authenticated.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden. The client is not authorized.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not found. The server cannot find the specified resource.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("VMware Cloud DR-specific error.<br> An error unique to VMware Cloud DR was encountered while attempting to satisfy the request. See the returned object for details on the error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// A response object encoding an array of summary information about cloud file systems.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class GetAuthorizeResponse
        {
            [Newtonsoft.Json.JsonProperty("id_token", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string id_token { get; set; }


            [Newtonsoft.Json.JsonProperty("token_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string token_type { get; set; }

            [Newtonsoft.Json.JsonProperty("access_token", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string access_token { get; set; }


            [Newtonsoft.Json.JsonProperty("refresh_token", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string refresh_token { get; set; }

            [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string scope { get; set; }

            [Newtonsoft.Json.JsonProperty("expires_in", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string expires_in { get; set; }

        }

        /// <summary>
        /// Get a list of all deployed cloud file systems in your VMware Cloud DR organization.
        /// </summary>
        /// <returns>OK. The request succeeded.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual GetCloudFileSystemsResponse GetCloudFileSystems()
        {
            return System.Threading.Tasks.Task.Run(async () => await GetCloudFileSystemsAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }


 



        /// <summary>
        /// Get a list of all protected sites associated with an individual cloud file system.
        /// </summary>
        /// <param name="cloud_file_system_id">Unique identifier of an individual cloud file system. Use the cloud file system ID of the cloud file system for which you want to get a list of all protected sites.</param>
        /// <param name="limit">The maximum number of results to return with the call. The maximum is 500, and the default is 50 results. &lt;p&gt;&lt;b&gt;Note&lt;/b&gt;&amp;colon; The pre-release version of this API differs from this documentation. This parameter is ignored.</param>
        /// <param name="filter_spec">Used to filter the results. &lt;p&gt;&lt;b&gt;Note&lt;/b&gt;&amp;colon; The pre-release version of this API differs from this documentation. This parameter is ignored. All protected sites are returned.</param>
        /// <param name="cursor">An opaque string previously returned by this API that can be passed to this API in order to get the next set of results. If this property is not passed, enumeration of starts from the beginning. &lt;p&gt;&lt;b&gt;Note&lt;/b&gt;&amp;colon; The pre-release version of this API differs from this documentation. This parameter is ignored. All protected sites are returned when making this API call.</param>
        /// <returns>OK. The request succeeded.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual GetProtectedSitesResponse GetProtectedSites(string cloud_file_system_id, int? limit, ProtectedSitesFilterSpec filter_spec, string cursor)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetProtectedSitesAsync(cloud_file_system_id, limit, filter_spec, cursor, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }


        /// <summary>
        /// Get a list of all protected VMs currently being replicated to the specified cloud file system. VMs will not be returned if they are not contained within at least one protection group snapshot in the specified cloud file system.
        /// </summary>
        /// <param name="cloud_file_system_id">Unique identifier of an individual cloud file system. Use the cloud file system ID of the cloud file system from where you want to get a list of all protected VMs.</param>
        /// <param name="limit">The maximum number of results to return with the call. The maximum is 500, and the default is 50 results.</param>
        /// <param name="filter_spec">Used to filter the results.</param>
        /// <param name="cursor">An opaque string previously returned by this API that can be passed to this API in order to get the next set of results. If this property is not passed, enumeration of starts from the beginning.</param>
        /// <returns>OK. The request succeeded.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual GetProtectedVirtualMachinesResponse GetProtectedVirtualMachines(string cloud_file_system_id, int? limit, VmsFilterSpec filter_spec, string cursor)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetProtectedVirtualMachinesAsync(cloud_file_system_id, limit, filter_spec, cursor, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();

        }




        /// <summary>
        /// List VMware Cloud (VMC) Recovery Software-Defined Datacenters (SDDCs).
        /// </summary>
        /// <returns>OK. The request succeeded.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual GetRecoverySddcResponse GetRecoverySddc()
        {
            return System.Threading.Tasks.Task.Run(async () => await GetRecoverySddcAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of all snapshots in a specific protection group.
        /// </summary>
        /// <param name="cloud_file_system_id">Unique identifier of an individual cloud file system. Use the cloud file system ID of the cloud file system for which you want to get a list of all protected VMs.</param>
        /// <param name="protection_group_id">Unique identifier of the protection group you want to get a list of snapshots from.</param>
        /// <param name="limit">The maximum number of results to return with the call. The maximum is 500, and the default is 50 results.</param>
        /// <param name="cursor">An opaque string previously returned by this API that can be passed to this API in order to get the next set of results. If this property is not passed, enumeration of starts from the beginning.</param>
        /// <returns>OK. The request succeeded.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual GetProtectionGroupSnapshotsResponse GetProtectionGroupSnapshots(string cloud_file_system_id, string protection_group_id, int? limit, string cursor)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetProtectionGroupSnapshotsAsync(cloud_file_system_id, protection_group_id, limit, cursor, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of all protection groups associated with an individual cloud file system.
        /// </summary>
        /// <param name="cloud_file_system_id">Unique identifier of an individual cloud file system. Use the cloud file system ID of the cloud file system from where you want to get a list of all protected VMs.</param>
        /// <param name="limit">The maximum number of results to return with the call. The maximum is 500, and the default is 50 results.</param>
        /// <param name="filter_spec">Used to filter the results.</param>
        /// <param name="cursor">An opaque string previously returned by this API that can be passed to this API in order to get the next set of results. If this property is not passed, enumeration of starts from the beginning.</param>
        /// <returns>OK. The request succeeded.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual GetProtectionGroupsResponse GetProtectionGroups(string cloud_file_system_id, int? limit, ProtectionGroupsFilterSpec filter_spec, string cursor)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetProtectionGroupsAsync(cloud_file_system_id, limit, filter_spec, cursor, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }




        /// <summary>
        /// Get details about an individual protected site.
        /// </summary>
        /// <param name="cloud_file_system_id">Unique identifier of an individual cloud file system. Use the cloud file system ID of the cloud file system for which you want to get a list of all protected sites.</param>
        /// <param name="id">The unique identifier of the individual protected site for which you want to get details.</param>
        /// <returns>OK. The request succeeded.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual ProtectedSite GetProtectedSiteDetails(string cloud_file_system_id, string id)
        {
            var p = System.Threading.Tasks.Task.Run(async () => await GetProtectedSiteDetailsAsync(cloud_file_system_id, id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
            var result = new ProtectedSite(p);
            result.CloudFileSystemId = cloud_file_system_id;
            return result;
        }

        /// <summary>
        /// Get details for the requested protection group.
        /// </summary>
        /// <param name="cloud_file_system_id">The cloud file system containing the protection group of interest.</param>
        /// <param name="id">The protection group of interest.</param>
        /// <returns>OK. The request succeeded.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual ProtectionGroup GetProtectionGroupDetails(string cloud_file_system_id, string id)
        {
            var p = System.Threading.Tasks.Task.Run(async () => await GetProtectionGroupDetailsAsync(cloud_file_system_id, id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
            ProtectionGroup result = new ProtectionGroup(p);
            result.CloudFileSystemId = cloud_file_system_id;
            return result;
        }
        /// <summary>
        /// Get details of a specific Recovery SDDC.
        /// </summary>
        /// <param name="id">The Recovery SDDC of interest.</param>
        /// <returns>OK. The request succeeded.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual RecoverySddc GetRecoverySddcDetails(string id)
        {
            var p = System.Threading.Tasks.Task.Run(async () => await GetRecoverySddcDetailsAsync(id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
            var result = new RecoverySddc(p);
            return result;
        }

        /// <summary>
        /// Get detailed information for a protection group snapshot.
        /// </summary>
        /// <param name="cloud_file_system_id">The cloud file system containing the protection group snapshot of interest.</param>
        /// <param name="protection_group_id">The protection group associated with the protection group snapshot of interest.</param>
        /// <param name="id">The protection group snapshot of interest.</param>
        /// <returns>OK. The request succeeded.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual ProtectionGroupSnapshotDetails GetProtectionGroupSnapshotDetails(string cloud_file_system_id, string protection_group_id, string id)
        {
            var p = System.Threading.Tasks.Task.Run(async () => await GetProtectionGroupSnapshotDetailsAsync(cloud_file_system_id, protection_group_id, id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
            var result = new ProtectionGroupSnapshot(p);
            result.CloudFileSystemId = cloud_file_system_id;
            return result;
        }



        /// <summary>
        /// Get details for an individual cloud file system.
        /// </summary>
        /// <param name="id">The identifier of the cloud file system.</param>
        /// <returns>OK. The request succeeded.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual CloudFileSystem GetCloudFileSystemDetails(string id) 
        {
            var p = System.Threading.Tasks.Task.Run(async () => await GetCloudFileSystemDetailsAsync(id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
            var result = new CloudFileSystem(p);
            result.IRRServer = this._server;
            return result;
        }


    }
   
}
#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
#pragma warning restore 3016
#pragma warning restore 8603